import type { RsbuildPlugin } from '@rsbuild/core'
import { writeFileSync } from 'node:fs'
import path from 'node:path'
import oxc from 'oxc-parser'

function normalizePath(filename: string) {
  return filename.replaceAll('\\', '/')
}

function createImportType(path: string, name: string | string[]) {
  const _name = Array.isArray(name) ? name : [name]
  return `typeof import('${normalizePath(path)}')${_name.map(item => `['${item}']`)}` as const
}

function generateDts(invokeExpose: string[], listenerExpose: string[]) {
  return `/* eslint-disable */
// @ts-nocheck
// Generated by unplugin-tipc
// biome-ignore lint: disable
export {}

declare module '@byc/tipc' {
  interface TipcInvokeExpose {
    ${invokeExpose.join('\n    ')}
  }

  interface TipcListenerExpose {
    ${listenerExpose.join('\n    ')}
  }
}
`
}

// function searchDefineSchema(rootPath: string) {
//   const files = searchTipcSchemaRecursive(rootPath)
//   return files
// }

export default function (): RsbuildPlugin {
  const map = new Map<string, { from: string, import: string, default: boolean }>()
  return {
    name: 'unplugin-tipc',
    setup: async (api) => {
      const rootPath = api.context.rootPath
      api.transform({ test: /\.ts$/ }, ({ code, resourcePath }) => {
        const result = oxc.parseSync(path.basename(resourcePath), code)

        result.program.body.forEach((exportDecl) => {
          if (exportDecl.type === 'ExportNamedDeclaration'
            && exportDecl.declaration?.type === 'VariableDeclaration') {
            exportDecl.declaration.declarations.forEach((declaration) => {
              // Check if declaration is a defineTipc call
              if (declaration.id.type === 'Identifier'
                && declaration.init?.type === 'CallExpression'
                && declaration.init.callee.type === 'Identifier'
                && declaration.init.callee.name === 'defineSchema') {
                const firstArg = declaration.init.arguments[0]
                if (firstArg.type !== 'Literal')
                  return

                if (typeof firstArg.value !== 'string')
                  return

                map.set(firstArg.value, {
                  default: false,
                  from: path.relative(rootPath, resourcePath),
                  import: declaration.id.name,
                })
              }
            })
          }
        })
        return code
      })

      api.onBeforeBuild(() => map.clear())

      api.onAfterBuild(() => {
        const handlers: string[] = []
        const listeners: string[] = []

        for (const [key, value] of map) {
          const item = `${key}: typeof import('./${normalizePath(value.from)}')['${value.import}']`
          // createImport(normalizePath(value.from), [value.import, 'handlers'])
          handlers.push(`${item}['handlers']`)
          listeners.push(`${item}['listeners']`)
        }

        writeFileSync(path.resolve(rootPath, 'tipc.d.ts'), generateDts(handlers, listeners))
      })
    },
  }
}
